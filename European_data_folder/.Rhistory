ab <- data.frame(a,b)
}
df <- f_df[1:4]
df[5] <- f_df[41]
df[6:41] <- f_df[5:40]
row.names(ab) <- colnames(df)[6:41]
for (i in 1:length(df_num)) {
a[i] <- boxplot(df_num)$stats[,i][1]
b[i] <- boxplot(df_num)$stats[,i][5]
ab <- data.frame(a,b)
}
# 이상치 제거
# 연속형 변수 저장
df_num <- df[,6:41]
for (i in 1:length(df_num)) {
a[i] <- boxplot(df_num)$stats[,i][1]
b[i] <- boxplot(df_num)$stats[,i][5]
ab <- data.frame(a,b)
}
df <- f_df[1:4]
df[5] <- f_df[41]
df[6:41] <- f_df[5:40]
row.names(ab) <- colnames(df)[6:41]
# 이상치 제거
df_f <- df
for (i in 1:36) {
df_f <- df_f %>% filter(df_f[i+ 5] >= ab[i,1] & df_f[i + 5] <= ab[i,2])
}
table(df$RANK_C) # 360, 162
table(df_f$RANK_C) # 127, 53
boxplot(df_f[6:41])
write.xlsx(df, "scale_indiv_project.xlsx", sheetName = "Second", row.names = F)
# 변수 간의 관계분석
tab1 <- table(df_f$RANK_C, df_f$REAGUE)
# 변수 간의 관계분석
tab1 <- table(df_f$RANK_C, df_f$REAGUE)
# 변수 간의 관계분석
tab1 <- table(df_f$RANK_C, df_f$LEAGUE)
tab1
barplot(tab1, beside = T, horiz = T)
barplot(tab1, beside = F, horiz = T, col = rainbow(3))
mosaicplot(tab1, color = rainbow(3))
mosaicplot(tab1, color = rainbow(3), margin = T)
densityplot(~RANK_C | LEAGUE, data = df_f, auto.key = T)
barplot(tab1, beside = F, horiz = T, col = rainbow(3))
barplot(tab1, beside = F, horiz = T, col = rainbow(3), density = F)
barplot(tab1, beside = F, horiz = T, col = rainbow(3), density = T)
barplot(tab1, beside = F, horiz = T, col = rainbow(3))
barplot(tab1, beside = F, horiz = F, col = rainbow(3))
barplot(tab1, beside = T, horiz = F, col = rainbow(3))
barplot(tab1, beside = T, horiz = F, col = rainbow(2))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1))
barplot(tab1, beside = T, horiz = F, col = rainbow(2))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1), height = c(0,100))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1), height = tab1)
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1), ylim = c(0, 100))
mosaicplot(tab1, color = rainbow(3))
barplot(tab1, beside = T, horiz = F, col = rainbow(2), legend = row.names(tab1), ylim = c(0, 100))
tab1
boxplot(df_f[6:41])
# [단계2] 이전 R version 설치하기
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = NULL)
# [단계2] 이전 R version 설치하기
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = NULL, type = binary)
# [단계2] 이전 R version 설치하기
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = NULL, type = url)
# [단계2] 이전 R version 설치하기
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = NULL, type = "Source")
# [단계2] 이전 R version 설치하기
library(rJava)
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = NULL)
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = NULL, type = "both")
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.4/KoNLP_0.80.1.zip", repos = 'source')
library(KoNLP)
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
Sys.setenv("JAVA_HOME" = "/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home")
require(KoNLP)
# 2) Sejong 설치 : KoNLP와 의존성 있는 현재 번전의 Sejong 설치
install.packages("Sejong")
install.packages("Sejong")
# 3) wordcloud 설치
install.packages("wordcloud")
# 4) tm 설치
install.packages("tm")
library(tm)
library(NLP)
library(tm)
library(wordcloud)
## 2. facebook_bigdata.txt 가져오기
facebook <- file(file.choose(), encoding = "UTF-8")
facebook_data <- readline(facebook) # 줄 단위 TEXT FILE 읽기
head(facebook_data)
head(facebook_data)
facebook
facebook_data <- readLines(facebook) # 줄 단위 TEXT FILE 읽기
head(facebook_data)
str(facebook_data)
## 3. 세종 사전에 신규 단어 추가
# term : 추가단어, ncn : 명사지시코드
user_dic <- data.frame(term = c("R 프로그랭", "페이스북", "김진성", "소셜네트워크"), tag = "ncn")
# Sejong 사전에 신규 단어 추가 : KoNLP 제공
buildDictionary(ext_dic = "sejong", user_dic = user_dic)
## 4. 단어추출 사용자 함수 정의
# (1) 사용자 정의 함수 실행 순서 : 문장 -> 문자형 -> 명사 추출 -> 공백 합침
exNoun <- function(x) {
paste(extractNoun(as.character(x)), collapse = " ")
}
# (2) exNouns 함수 이용 단어 추출
# 형식) sapply(vector, 함수) -> 문장에서 단어 추출
facebook_nouns <- sapply(facebook_data, exNouns)
## 4. 단어추출 사용자 함수 정의
# (1) 사용자 정의 함수 실행 순서 : 문장 -> 문자형 -> 명사 추출 -> 공백 합침
exNoun <- function(x) {
paste(extractNoun(as.character(x)), collapse = " ")
}
# (2) exNouns 함수 이용 단어 추출
# 형식) sapply(vector, 함수) -> 문장에서 단어 추출
facebook_nouns <- sapply(facebook_data, exNouns)
## 4. 단어추출 사용자 함수 정의
# (1) 사용자 정의 함수 실행 순서 : 문장 -> 문자형 -> 명사 추출 -> 공백 합침
exNouns <- function(x) {
paste(extractNoun(as.character(x)), collapse = " ")
}
# (2) exNouns 함수 이용 단어 추출
# 형식) sapply(vector, 함수) -> 문장에서 단어 추출
facebook_nouns <- sapply(facebook_data, exNouns)
facebook_nouns
# (3) 단어 추출 결과
str(facebook_nouns)
## 5. 데이터 전처리
# (1) 말뭉치(코퍼스:Corpus) 생성 : 텍스트를 처리할 수 있는 자료의 집합
myCorpus <- Corpus(VectorSource(facebook_nouns)) # 벡터 소스 생성 -> 코퍼스 생성
myCorpus
inspect(myCorpus[1])
# (2) 데이터 전처리 : 말뭉치 대상 전처리
myCorpusPrepro <- tm_map(myCorpus, removePunctuation)
myCorpusPrepro <- tm_map(myCorpusPrepro, removeNumbers) # 수치 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, removeWords, stopwords("english")) # 수치 제거
stopwords("english")
# (3) 전처리 겨과 확인
myCorpusPrepro
inspect(myCorpusPrepro[1:5])
## 6. 단어 선별(단어 길이 2개 이상)
# (1) 단어길이 2개 이상(한글 1개 2byte) 단어 선별 -> matrix 변경
myCorpusPrepro_term <- TermDocumentMatrix(myCorpusPrepro, control = list(wordLengths = c(4, 16)))
myCorpusPrepro_term
# (2) Corpus -> 평서문 변환 : matrix -> data.frame 변경
myTerm_df <- as.data.frame(as.matrix(myCorpusPrepro_term))
str(myCorpusPrepro_term)
class(myCorpusPrepro_term)
## 7. 단어 빈도수 구하기
# (1) 단어 빈도수 내림차순 정렬
wordResult <- sor(rownames(myTerm_df), decreasing = T)
## 7. 단어 빈도수 구하기
# (1) 단어 빈도수 내림차순 정렬
wordResult <- sort(rownames(myTerm_df), decreasing = T)
w_name <- names(wordResult)
## 8. 단어구름에 디자인 적용(빈도수, 색상, 랜덤, 회전 등)
# (1) 단어 이름 생성 -> 빈도수의 이름
myName <- names(wordResult)
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word = myName, freq = wordResult)
## 8. 단어구름에 디자인 적용(빈도수, 색상, 랜덤, 회전 등)
# (1) 단어 이름 생성 -> 빈도수의 이름
myName <- names(wordResult)
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word = myName, freq = wordResult)
myName
## 7. 단어 빈도수 구하기
# (1) 단어 빈도수 내림차순 정렬
wordResult <- sort(rownames(myTerm_df), decreasing = T)
w_name <- names(wordResult)
## 8. 단어구름에 디자인 적용(빈도수, 색상, 랜덤, 회전 등)
# (1) 단어 이름 생성 -> 빈도수의 이름
myName <- names(wordResult)
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word=myName, freq=wordResult)
## 7. 단어 빈도수 구하기
# (1) 단어 빈도수 내림차순 정렬
wordResult <- sort(rownames(myTerm_df), decreasing = T)
## 7. 단어 빈도수 구하기
# (1) 단어 빈도수 내림차순 정렬
wordResult <- sort(rowSums(myTerm_df), decreasing=TRUE)
## 8. 단어구름에 디자인 적용(빈도수, 색상, 랜덤, 회전 등)
# (1) 단어 이름 생성 -> 빈도수의 이름
myName <- names(wordResult)
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word=myName, freq=wordResult)
str(word.df) # word, freq 변수
# (3) 단어 색상과 글꼴 지정
pal <- brewer.pal(12,"Paired") # 12가지 색상 pal <- brewer.pal(9,"Set1") # Set1~ Set3
# 폰트 설정세팅 : "맑은 고딕", "서울남산체 B"
windowsFonts(malgun=windowsFont("맑은 고딕"))  #windows
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(5,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal, family="malgun")
wordResult
myName
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word=myName, freq=wordResult)
str(word.df) # word, freq 변수
# (3) 단어 색상과 글꼴 지정
pal <- brewer.pal(12,"Paired") # 12가지 색상 pal <- brewer.pal(9,"Set1") # Set1~ Set3
# 폰트 설정세팅 : "맑은 고딕", "서울남산체 B"
windowsFonts(malgun=windowsFont("맑은 고딕"))  #windows
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(5,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal)
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
#개인화된 테마 작업
theme_gogamza<- function(base_size = 12, base_family = "NanumGothic"){
(theme_foundation(base_size = base_size, base_family = base_family) +
theme(line = element_line(colour = "black"), rect = element_rect(fill = ggthemes_data$fivethirtyeight["ltgray"],
linetype = 0, colour = NA), text = element_text(colour = ggthemes_data$fivethirtyeight["dkgray"]),
axis.title = element_text(), axis.text = element_text(),
axis.ticks = element_blank(), axis.line = element_blank(),
legend.background = element_rect(), legend.position = "bottom",
legend.direction = "horizontal", legend.box = "vertical",
panel.grid = element_line(colour = NULL), panel.grid.major = element_line(colour = ggthemes_data$fivethirtyeight["medgray"]),
panel.grid.minor = element_blank(), plot.title = element_text(hjust = 0,
size = rel(1.5), face = "bold"), plot.margin = grid::unit(c(1,
1, 0.5, 0.5), "lines"), strip.background = element_rect(), panel.margin.x=NULL, panel.margin.y=NULL))
}
#기본 테마에서 한글 폰트 정의를 하고 싶다면 아래 코드만 실행한다.
theme_set(theme_gray(base_family='NanumGothic'))
library(extrafont)
par(family="NanumGothic")
data(iris)
iris
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(5,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal)
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(5,1), min.freq=2, random.order=T,
rot.per=.1, colors=pal)
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
x11()
wordcloud(word.df$word, word.df$freq,
scale=c(6,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal)
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(6,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), encoding = "UTF-8")
doramp2 <- readLines(doramp)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose())
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), encoding = "euc-kr")
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), encoding = "euc-kr", sep = ",", quote = F)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), encoding = "euc-kr", sep = " ", quote = F)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), encoding = "euc-kr", sep = " ", quote = T)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), file = NA)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), fill = NA)
source('~/Desktop/bigdata/R/ITWILL/R-script/연습문제/제9장_2 연습문제.R', echo=TRUE)
doramp2 <- readLines(doramp)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), fill = NA, stringsAsFactors = F)
doramp2 <- readLines(doramp)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- read.table(file.choose(), fill = T)
doramp
facebook
facebook_data
str(facebook_data)
str(doramp)
## 2. facebook_bigdata.txt 가져오기
facebook <- file(file.choose(), encoding = "UTF-8")
str(facebook)
# 01. 트럼프 연설문(trump.txt)과 오바마 연설문(obama.txt)을 대상으로 빈도수가 2회 이상 단어를 대상으로 단어구름 시각화하시오.
doramp <- file(file.choose())
doramp2 <- readLines(doramp)
myCorpus <- Corpus(VectorSource(doramp2))
myCorpus
myCorpusPrepro <- tm_map(myCorpus, removePunctuation) # 문장부호 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, removeNumbers) # 수치 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, tolower) # 소문자 변경
myCorpusPrepro <- tm_map(myCorpusPrepro, removeWords, stopwords("english"))
myCorpusPrepro_term <- TermDocumentMatrix(myCorpusPrepro, control = list(wordLengths = c(2, 16)))
myTerm_df <- as.data.frame(as.matrix(myCorpusPrepro_term))
wordResult <- sort(rowSums(myTerm_df), decreasing=TRUE)
wordResult
myCorpusPrepro_term
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word=myName, freq=wordResult)
str(word.df) # word, freq 변수
# (3) 단어 색상과 글꼴 지정
pal <- brewer.pal(12,"Paired") # 12가지 색상 pal <- brewer.pal(9,"Set1") # Set1~ Set3
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(6,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal)
myCorpusPrepro <- tm_map(myCorpusPrepro, removeWords, stopwords("english"))
myCorpusPrepro_term <- TermDocumentMatrix(myCorpusPrepro, control = list(wordLengths = c(2, 16)))
myTerm_df <- as.data.frame(as.matrix(myCorpusPrepro_term))
wordResult <- sort(rowSums(myTerm_df), decreasing=TRUE)
## 8. 단어구름에 디자인 적용(빈도수, 색상, 랜덤, 회전 등)
# (1) 단어 이름 생성 -> 빈도수의 이름
myName <- names(wordResult)
# (2) 단어이름과 빈도수로 data.frame 생성
word.df <- data.frame(word=myName, freq=wordResult)
str(word.df) # word, freq 변수
# (3) 단어 색상과 글꼴 지정
pal <- brewer.pal(12,"Paired") # 12가지 색상 pal <- brewer.pal(9,"Set1") # Set1~ Set3
# (4) 단어 구름 시각화 - 별도의 창에 색상, 빈도수, 글꼴, 회전 등의 속성을 적용하여
wordcloud(word.df$word, word.df$freq,
scale=c(6,1), min.freq=2, random.order=F,
rot.per=.1, colors=pal)
doramp2 <- readLines(doramp)
myCorpus <- Corpus(VectorSource(doramp2))
myCorpusPrepro <- tm_map(myCorpus, removePunctuation) # 문장부호 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, removeNumbers) # 수치 제거
myCorpusPrepro <- tm_map(myCorpusPrepro, tolower) # 소문자 변경
myCorpusPrepro <- tm_map(myCorpusPrepro, removeWords, stopwords("english"))
myCorpusPrepro_term <- TermDocumentMatrix(myCorpusPrepro, control = list(wordLegnts(c(4,Inf))))
myCorpusPrepro_term <- TermDocumentMatrix(myCorpusPrepro, control = list(wordLengths(c(4,Inf))))
myCorpusPrepro_term <- TermDocumentMatrix(myCorpusPrepro, control = list(wordLengths = c(4,Inf)))
df1 <- as.data.frame(as.matrix(myCorpusPrepro_term))
wf1 <- sort(rowSums(df1), decreasing = T)
head(wf1)
str(wf1)
na <- rownames(wf1)
df2 <- data.frame(name = na, fr = wf1)
na <- names(wf1)
df2 <- data.frame(name = na, fr = wf1)
wordcloud(df2$na, wf1)
# 한글 처리를 위한 패키지 설치
Sys.setenv("JAVA_HOME" = "/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home")
# 1.텍스트 파일 가져오기
#----------------------------------------------------
marketing <- file(file.choose(), encoding="UTF-8")
marketing2 <- readLines(marketing) # 줄 단위 Test file 읽기
close(marketing)
head(marketing2) # 앞부분 6줄 보기 - 줄 단위 문장 확인
str(marketing2)
# 2. 줄 단위 단어 추출
#----------------------------------------------------
# Map()함수 이용 줄 단위 단어 추출
lword <- Map(extractNoun, marketing2)
length(lword) # [1] 472
lword <- unique(lword) # 중복제거1(전체 대상)
length(lword) # [1] 353(119개 제거)
class(lword) # list
# 3. 전처리
#----------------------------------------------------
# 1) 한글 단어 길이 2~4 필터링 함수
filter1 <- function(x){
nchar(x) <= 4 && nchar(x) >= 2 && is.hangul(x)
}
# 2) Filter(f,x) -> filter1() 함수를 적용하여 x 벡터 단위 필터링
filter2 <- function(x){
Filter(filter1, x)
}
# 3) 줄 단어 대상 필터링
lword_final <- sapply(lword, filter2)
lword_final # 추출 단어 확인(길이 1개 단어 삭제됨)
# 4. 트랜잭션 생성 : 연관분석 위해서 트랜잭션 변환
#----------------------------------------------------
# arules 패키지 설치
install.packages("arules")
library(arules)
wordtran <- as(lword_final, "transactions") # 중복 word 있으면 error발생
wordtran
# 트랜잭션 내용 보기 -> 각 트랜잭션의 단어 보기
inspect(wordtran)
# 5.단어 간 연관규칙 산출
#----------------------------------------------------
# 지지도와 신뢰도를 적용하여 연관규칙 생성
# 형식) apriori(data, parameter = NULL, appearance = NULL, control = NULL)
tranrules <- apriori(wordtran, parameter=list(supp=0.25, conf=0.05))
inspect(tranrules) # 연관규칙 생성 결과
# 6.연관어 시각화
#----------------------------------------------------
# (1) 데이터 구조 변경 : 연관규칙 -> label 추출
rules <- labels(tranrules, ruleSep=" ")
rules
# 문자열로 묶인 연관단어를 행렬구조 변경
rules <- sapply(rules, strsplit, " ",  USE.NAMES=F)
rules
# list -> matrix 반환
rulemat <- do.call("rbind", rules)
rulemat
# (2) 연관어 시각화를 위한 igraph 패키지 설치
install.packages("igraph") # graph.edgelist(), plot.igraph(), closeness() 함수 제공
library(igraph)
# (3) edgelist보기 - 연관단어를 정점 형태의 목록 제공
ruleg <- graph.edgelist(rulemat[c(12:59),], directed=F) # [1,]~[11,] "{}" 제외
ruleg
# (4) edgelist 시각화
X11()
plot.igraph(ruleg, vertex.label=V(ruleg)$name,
vertex.label.cex=1.2, vertex.label.color='black',
vertex.size=20, vertex.color='green', vertex.frame.color='blue')
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
#개인화된 테마 작업
theme_gogamza<- function(base_size = 12, base_family = "NanumGothic"){
(theme_foundation(base_size = base_size, base_family = base_family) +
theme(line = element_line(colour = "black"), rect = element_rect(fill = ggthemes_data$fivethirtyeight["ltgray"],
linetype = 0, colour = NA), text = element_text(colour = ggthemes_data$fivethirtyeight["dkgray"]),
axis.title = element_text(), axis.text = element_text(),
axis.ticks = element_blank(), axis.line = element_blank(),
legend.background = element_rect(), legend.position = "bottom",
legend.direction = "horizontal", legend.box = "vertical",
panel.grid = element_line(colour = NULL), panel.grid.major = element_line(colour = ggthemes_data$fivethirtyeight["medgray"]),
panel.grid.minor = element_blank(), plot.title = element_text(hjust = 0,
size = rel(1.5), face = "bold"), plot.margin = grid::unit(c(1,
1, 0.5, 0.5), "lines"), strip.background = element_rect(), panel.margin.x=NULL, panel.margin.y=NULL))
}
#기본 테마에서 한글 폰트 정의를 하고 싶다면 아래 코드만 실행한다.
theme_set(theme_gray(base_family='NanumGothic'))
install.packages("extrafont")
library(extrafont)
par(family="NanumGothic")
data(iris)
iris
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
#개인화된 테마 작업
theme_gogamza<- function(base_size = 12, base_family = "NanumGothic"){
(theme_foundation(base_size = base_size, base_family = base_family) +
theme(line = element_line(colour = "black"), rect = element_rect(fill = ggthemes_data$fivethirtyeight["ltgray"],
linetype = 0, colour = NA), text = element_text(colour = ggthemes_data$fivethirtyeight["dkgray"]),
axis.title = element_text(), axis.text = element_text(),
axis.ticks = element_blank(), axis.line = element_blank(),
legend.background = element_rect(), legend.position = "bottom",
legend.direction = "horizontal", legend.box = "vertical",
panel.grid = element_line(colour = NULL), panel.grid.major = element_line(colour = ggthemes_data$fivethirtyeight["medgray"]),
panel.grid.minor = element_blank(), plot.title = element_text(hjust = 0,
size = rel(1.5), face = "bold"), plot.margin = grid::unit(c(1,
1, 0.5, 0.5), "lines"), strip.background = element_rect(), panel.margin.x=NULL, panel.margin.y=NULL))
}
#기본 테마에서 한글 폰트 정의를 하고 싶다면 아래 코드만 실행한다.
theme_set(theme_gray(base_family='NanumGothic'))
library(extrafont)
par(family="NanumGothic")
data(iris)
# (4) edgelist 시각화
X11()
plot.igraph(ruleg, vertex.label=V(ruleg)$name,
vertex.label.cex=1.2, vertex.label.color='black',
vertex.size=20, vertex.color='green', vertex.frame.color='blue')
plot.igraph(ruleg, vertex.label=V(ruleg)$name,
vertex.label.cex=1.2, vertex.label.color='black',
vertex.size=20, vertex.color='green', vertex.frame.color='blue')
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
#개인화된 테마 작업
theme_gogamza<- function(base_size = 12, base_family = "NanumGothic"){
(theme_foundation(base_size = base_size, base_family = base_family) +
theme(line = element_line(colour = "black"), rect = element_rect(fill = ggthemes_data$fivethirtyeight["ltgray"],
linetype = 0, colour = NA), text = element_text(colour = ggthemes_data$fivethirtyeight["dkgray"]),
axis.title = element_text(), axis.text = element_text(),
axis.ticks = element_blank(), axis.line = element_blank(),
legend.background = element_rect(), legend.position = "bottom",
legend.direction = "horizontal", legend.box = "vertical",
panel.grid = element_line(colour = NULL), panel.grid.major = element_line(colour = ggthemes_data$fivethirtyeight["medgray"]),
panel.grid.minor = element_blank(), plot.title = element_text(hjust = 0,
size = rel(1.5), face = "bold"), plot.margin = grid::unit(c(1,
1, 0.5, 0.5), "lines"), strip.background = element_rect(), panel.margin.x=NULL, panel.margin.y=NULL))
}
#기본 테마에서 한글 폰트 정의를 하고 싶다면 아래 코드만 실행한다.
theme_set(theme_gray(base_family='NanumGothic'))
# (4) edgelist 시각화
plot.igraph(ruleg, vertex.label=V(ruleg)$name,
vertex.label.cex=1.2, vertex.label.color='black',
vertex.size=20, vertex.color='green', vertex.frame.color='blue')
par(family="NanumGothic")
data(iris)
iris
# (4) edgelist 시각화
plot.igraph(ruleg, vertex.label=V(ruleg)$name,
vertex.label.cex=1.2, vertex.label.color='black',
vertex.size=20, vertex.color='green', vertex.frame.color='blue')
# (4) edgelist 시각화
plot.igraph(ruleg, vertex.label=V(ruleg)$name,
vertex.label.cex=1.2, vertex.label.color='black',
vertex.size=20, vertex.color='green', vertex.frame.color='blue')
